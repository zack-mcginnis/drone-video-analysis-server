worker_processes auto;
rtmp_auto_push on;

# Redirect error log to stderr for Docker logging
error_log /dev/stderr warn;

events {
    worker_connections 1024;
}

rtmp {
    server {
        listen 1935;
        chunk_size 4096;

        application live {
            live on;
            
            # Allow publishing and playing from anywhere
            allow publish all;
            allow play all;
            
            # Extract stream key from URL and validate using curl with GET method
            exec_publish curl -f -X GET "http://localhost:80/auth?name=${name}";
            
            # Enable recording directly to MP4 instead of FLV
            record all;
            record_path /recordings;
            record_unique on;
            record_suffix -%Y-%m-%d-%H-%M-%S.mp4;
            
            # Execute a script when recording is done
            exec_record_done /usr/local/bin/nginx_exec_wrapper.sh $path $name $basename;
            
            # Generate HLS during live streaming
            hls on;
            hls_path /tmp/hls;
            hls_fragment 2s;
            hls_playlist_length 1800s;
            
            # Use Unix epoch timestamp in fragment names
            hls_fragment_naming system;
            hls_fragment_naming_granularity 1000;  # Use millisecond precision
            
            # Save HLS segments and playlist for later use
            hls_cleanup off;
            
            # Create variants for adaptive streaming
            hls_variant _low BANDWIDTH=500000;
            hls_variant _mid BANDWIDTH=1000000;
            hls_variant _high BANDWIDTH=2000000;
        }
    }
}

http {
    sendfile off;
    tcp_nopush on;
    directio 512;
    default_type application/octet-stream;
    
    # Add resolver for Docker DNS
    resolver 127.0.0.11 ipv6=off;
    
    # Define custom log formats
    log_format main '$remote_addr [$time_local] $request "$args" $status $bytes_sent "$http_referer" "$http_user_agent"';
    log_format auth_debug '$remote_addr [$time_local] "$request" status=$status upstream_status=$upstream_status api_status=$sent_http_x_api_status';
    
    # Redirect access log to stdout for Docker logging
    access_log /dev/stdout main;
    
    # Add some basic security headers
    server_tokens off;
    
    # Increase timeouts for better stability
    keepalive_timeout 65;
    client_body_timeout 12;
    client_header_timeout 12;

    # Define allowed stream keys
    map $arg_name $stream_key_valid {
        "~^[a-zA-Z0-9]{8}$" 1;  # Accepts 8 character alphanumeric keys
        default 0;
    }
    
    # Map to handle CORS for multiple origins
    # NOTE: add your custom origin here
    map $http_origin $cors_origin {
        default "";
        "http://localhost:3000" $http_origin;
        "https://master.d30ze8pk52gyx8.amplifyapp.com" $http_origin;
        "https://dronehub.stream" $http_origin;
        "https://www.dronehub.stream" $http_origin;
    }
    
    # HTTP server for port 80
    server {
        listen 80;
        
        # Authentication endpoint for RTMP streams
        location = /auth {
            # Only allow internal requests
            allow 127.0.0.1;
            deny all;
            
            # Enable debug logging for auth requests
            access_log /dev/stdout auth_debug;
            
            if ($arg_name = "") {
                add_header X-Api-Status "no_stream_key";
                return 402 "No stream key provided";
            }
            
            if ($stream_key_valid = 0) {
                add_header X-Api-Status "invalid_format";
                return 403 "Invalid stream key format";
            }
            
            # Set API server variable for proxy_pass
            set $api_server "http://api-server:8000";
            
            # Proxy directly to API server
            proxy_pass $api_server/stream/validate/$arg_name;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header Host $http_host;
            
            # Important: increase timeouts for API call
            proxy_connect_timeout 5s;
            proxy_read_timeout 5s;
            
            # Let non-200 responses pass through
            proxy_intercept_errors off;
        }

        # Internal endpoint to validate stream key with API server
        location ~ ^/validate_stream_key/([^/]+)$ {
            internal;
            
            # Enable debug logging for validation requests
            access_log /dev/stdout auth_debug;
            
            # Proxy to API server
            proxy_pass http://api-server:8000/stream/validate/$1;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header Host $http_host;
            
            # Important: increase timeouts for API call
            proxy_connect_timeout 5s;
            proxy_read_timeout 5s;
            
            # Let non-200 responses pass through
            proxy_intercept_errors off;
        }

        # This URL provides RTMP statistics in XML
        location /stat {
            rtmp_stat all;
            rtmp_stat_stylesheet stat.xsl;
            
            add_header Access-Control-Allow-Origin $cors_origin always;
            add_header Access-Control-Allow-Methods 'GET, OPTIONS' always;
            add_header Access-Control-Allow-Headers 'Origin, X-Requested-With, Content-Type, Accept' always;
            add_header Cache-Control no-cache;
        }

        location /stat.xsl {
            root /usr/local/nginx/html;
        }
        
        # HLS
        location ~ ^/hls/([^/]+)\.m3u8$ {
            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }
            
            alias /tmp/hls/$1.m3u8;
        
            # Handle OPTIONS method for CORS preflight requests
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin $cors_origin always;
                add_header Access-Control-Allow-Methods 'GET, OPTIONS' always;
                add_header Access-Control-Allow-Headers 'Origin, X-Requested-With, Content-Type, Accept, Range' always;
                add_header Access-Control-Max-Age 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            # Add custom timing headers
            add_header X-Stream-Current-Time $time_iso8601 always;
            add_header X-Stream-Fragment-Duration "2" always;
            
            add_header Access-Control-Allow-Origin $cors_origin always;
            add_header Access-Control-Allow-Methods 'GET, OPTIONS' always;
            add_header Access-Control-Allow-Headers 'Origin, X-Requested-With, Content-Type, Accept, Range' always;
            add_header Access-Control-Expose-Headers 'Content-Length, Content-Range, X-Stream-Current-Time, X-Stream-Fragment-Duration' always;
            
            add_header Cache-Control no-cache;
        }
        
        # Also handle .ts files for HLS segments
        location ~ ^/hls/(.+\.ts)$ {
            alias /tmp/hls/$1;
            
            # Add timestamp headers (Unix epoch)
            add_header X-Segment-Timestamp $1 always;  # Filename contains Unix epoch timestamp
            add_header X-Server-Time $msec always;     # Current server time in Unix epoch (ms)
            
            add_header Access-Control-Allow-Origin $cors_origin always;
            add_header Access-Control-Allow-Methods 'GET, OPTIONS' always;
            add_header Access-Control-Allow-Headers 'Origin, X-Requested-With, Content-Type, Accept, Range' always;
            add_header Access-Control-Expose-Headers 'Content-Length, Content-Range, X-Segment-Timestamp, X-Server-Time' always;
            
            add_header Cache-Control no-cache;
        }
        
        # Serve recorded videos
        location /recordings {
            alias /recordings;
            autoindex on;
            
            # Add CORS headers
            add_header Access-Control-Allow-Origin $cors_origin always;
            add_header Access-Control-Allow-Methods 'GET, OPTIONS' always;
            add_header Access-Control-Allow-Headers 'Origin, X-Requested-With, Content-Type, Accept, Range' always;
        }
        
        # Root path
        location / {
            add_header Access-Control-Allow-Origin $cors_origin always;
            add_header Access-Control-Allow-Methods "GET, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Range" always;
            add_header Cache-Control no-cache;
        }
    }
    
    # Also keep the original HTTP server on port 8080 for backward compatibility
    server {
        listen 8080;
        
        # This URL provides RTMP statistics in XML
        location /stat {
            rtmp_stat all;
            rtmp_stat_stylesheet stat.xsl;
        }

        location /stat.xsl {
            root /usr/local/nginx/html;
        }
        
        # HLS
        location ~ ^/hls/([^/]+)\.m3u8$ {
            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }
            
            alias /tmp/hls/$1.m3u8;
        
            # Handle OPTIONS method for CORS preflight requests
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin $cors_origin always;
                add_header Access-Control-Allow-Methods 'GET, OPTIONS' always;
                add_header Access-Control-Allow-Headers 'Origin, X-Requested-With, Content-Type, Accept, Range' always;
                add_header Access-Control-Max-Age 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            # Always add CORS headers regardless of origin
            add_header Access-Control-Allow-Origin $cors_origin always;
            add_header Access-Control-Allow-Methods 'GET, OPTIONS' always;
            add_header Access-Control-Allow-Headers 'Origin, X-Requested-With, Content-Type, Accept, Range' always;
            add_header Access-Control-Expose-Headers 'Content-Length, Content-Range' always;
            
            # Disable cache for HLS fragments
            add_header Cache-Control no-cache;
        }
        
        # Also handle .ts files for HLS segments
        location ~ ^/hls/(.+\.ts)$ {
            alias /tmp/hls/$1;
            
            # Add timestamp headers (Unix epoch)
            add_header X-Segment-Timestamp $1 always;  # Filename contains Unix epoch timestamp
            add_header X-Server-Time $msec always;     # Current server time in Unix epoch (ms)
            
            add_header Access-Control-Allow-Origin $cors_origin always;
            add_header Access-Control-Allow-Methods 'GET, OPTIONS' always;
            add_header Access-Control-Allow-Headers 'Origin, X-Requested-With, Content-Type, Accept, Range' always;
            add_header Access-Control-Expose-Headers 'Content-Length, Content-Range, X-Segment-Timestamp, X-Server-Time' always;
            
            add_header Cache-Control no-cache;
        }
        
        # Serve recorded videos
        location /recordings {
            alias /recordings;
            autoindex on;
            
            # Add CORS headers
            add_header Access-Control-Allow-Origin $cors_origin always;
            add_header Access-Control-Allow-Methods 'GET, OPTIONS' always;
            add_header Access-Control-Allow-Headers 'Origin, X-Requested-With, Content-Type, Accept, Range' always;
        }
        
        # Root path
        location / {
            add_header Access-Control-Allow-Origin $cors_origin always;
            add_header Access-Control-Allow-Methods "GET, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Range" always;
            add_header Cache-Control no-cache;
        }
    }
} 